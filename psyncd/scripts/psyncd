#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
from sys import exit
import time
import threading
from typing import List
import json
import argparse

import enlighten
import appdirs
from vprint import vprint

from psyncd.job import SyncJob, JobDict
from psyncd.rsync import InotifyThread, RSyncThread

appdir = appdirs.AppDirs('psyncd')

def job_from_tuple(tup):
    if len(tup) != 2:
        raise ValueError('Must provide pair of values (source, dest)')
    return SyncJob(source=tup[0], dest=tup[1])


def menu():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-j", "--job", nargs=2, action='append', type=str, metavar=('source','dest'),
        help="Tuple of Source and Destfile tree to run, `path` or `host:path`")
    parser.add_argument(
        "-c", "--config", action='append', type=str, metavar='config',
        help="Path to a config file")

    return parser


def main(jobs):
    # type: (List[SyncJob]) -> int
    run_event = threading.Event()
    run_event.set()
    inotify_threads = {}
    rsync_threads = {}
    job_dict = JobDict()
    print(jobs)
    manager = enlighten.get_manager()
    for job in jobs:
        # this is bad and I feel bad
        rsync_bar = manager.counter(total=100, desc=job.source)

        inotify_threads[job] = InotifyThread(job_dict, job, run_event=run_event)
        rsync_threads[job] = RSyncThread(job_dict, job, rsync_bar, run_event=run_event)

    try:
        while True:
            time.sleep(0.1)
    except KeyboardInterrupt:
        print("attempting to close threads.")
        run_event.clear()
    finally:
        print("waiting on threads")

        for k, t in inotify_threads.items():
            t.join()
        for k, t in rsync_threads.items():
            t.join()
    print("threads successfully closed")

    return 0


if __name__ == '__main__':
    parser = menu()
    args = parser.parse_args()
    jobs = []
    if args.job:
        jobs += [job_from_tuple(t) for t in args.job]
    for c in args.config or []:
        with open(os.path.expanduser(c)) as fp:
            data = json.load(fp)
        if isinstance(data, dict):
            jobs.append(SyncJob(data))
        elif isinstance(data, list):
            jobs += [SyncJob(d) for d in data]
    vprint('{}'.format(jobs))
    exit(main(jobs))
